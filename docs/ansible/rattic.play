---
- hosts: rattic
  vars:
    release: "v0.16"
    urlroot: "/"
    db_name: rattic
    db_user: rattic
    db_passwd: allthepass
    # this should be either 'mysql' or 'postgres'
    db_platform: mysql
    #db_platform: postgres
  tasks:

  - name: abort if not redhat
    when: ansible_os_family != "RedHat"
    action: debug
      "msg=We don't support {{ ansible_os_family }}"
      fail=yes

  - name: abort if db_platform invalid
    when: db_platform != "mysql"
      and db_platform != "postgres"
    action: debug
      "msg=Ooops, db_platform must be either mysql or postgres"
      fail=yes

  - name: setup EPEL
    action: command rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm creates=/etc/yum.repos.d/epel.repo

  - name: install apache/python/etc
    action: yum name={{ item }} state=latest
    notify:
      - restart httpd
    with_items:
      - httpd
      - mod_wsgi
      - mod_ssl
      - git
      - cryptsetup
      - device-mapper
      - util-linux
      - python-virtualenv
      - openldap-devel
      - libselinux-python
      - gcc
      - python-devel

  - name: turn off selinux
    selinux: state=disabled

  - name: copy apache config
    action: template src=files/httpd.conf.j2 dest=/etc/httpd/conf.d/rattic.conf
    notify: reload httpd

  - name: create apps dir
    action: file dest=/opt/apps state=directory

  - name: checkout RatticWeb.wiki
    action: git repo=git://github.com/tildaslash/RatticWeb.wiki.git dest=/opt/apps/RatticWeb.wiki force=no version={{ release }}
    when: release != "vagrant"

  - name: checkout latest RatticWeb.wiki
    action: git repo=git://github.com/tildaslash/RatticWeb.wiki.git dest=/opt/apps/RatticWeb.wiki force=no version=master
    when: release == "vagrant"

  - name: checkout RatticWeb
    git: repo=git://github.com/tildaslash/RatticWeb.git dest=/opt/apps/RatticWeb force=no version={{ release }}
    when: release != "vagrant"
    notify:
      - restart httpd

  - name: link to external RatticWeb
    file: path=/opt/apps/RatticWeb state=link src=/vagrant
    when: release == "vagrant"

  - name: create static dir
    action: file dest=/opt/apps/RatticWeb/static state=directory

  - name: encrypt swap
    action: lineinfile dest=/etc/crypttab regexp="^swap" line="swap /dev/VolGroup/lv_swap /dev/urandom swap,cipher=aes-cbc-essiv:sha256"

  - name: use encrypted swap
    action: lineinfile dest=/etc/fstab regexp="swap.*swap.*defaults" line="/dev/mapper/swap none swap defaults 0 0"

  - name: set apache to start
    action: service name=httpd state=started enabled=yes

  ### mysql setup tasks
  - name: install mysql
    action: yum name={{ item }} state=latest
    notify:
      - restart mysql
    with_items:
      - mysql-server
      - mysql-devel
      - mysql
      - MySQL-python

  - name: set mysql to start
    action: service name=mysqld state=started enabled=yes
    when: db_platform == "mysql"

  - name: create MySQL database
    action: mysql_db db={{db_name}} state=present
    when: db_platform == "mysql"
    notify:
      - create initial user

  - name: remove MySQL test database
    action: mysql_db db=test state=absent
    when: db_platform == "mysql"

  - name: create MySQL user
    action: mysql_user name={{db_user}} password={{db_passwd}} priv={{db_name}}.*:ALL state=present
    when: db_platform == "mysql"

  ### postgresql setup tasks
  - name: install postgresql
    action: yum name={{ item }} state=latest
    notify:
      - restart postgresql
    with_items:
      - postgresql-server
      - postgresql-devel
      - python-psycopg2

  - name: initdb for postgresql
    command: /etc/init.d/postgresql initdb creates=/var/lib/pgsql/data/postgresql.conf
  - name: set PostgreSQL to start
    action: service name=postgresqld state=started enabled=yes
    when: db_platform == "postgresql"

  - name: create PostgreSQL user
    action: postgresql_user name={{db_user}} password={{db_passwd}} encrypted=false state=present
    when: db_platform == "postgresql"

  - name: create PostgreSQL database
    action: postgresql_db name={{db_name}} owner={{db_user}} state=present
    when: db_platform == "postgresql"
    notify:
      - create initial user

  - name: Setup virtualenv (pgsql)
    pip: requirements=/opt/apps/RatticWeb/requirements-pgsql.txt virtualenv=/opt/apps/RatticWeb.venv
    when: db_platform == "postgresql"
    notify:
      - restart httpd

  - name: setup RatticWeb
    action: template src=files/local.cfg.j2 dest=/etc/ratticweb.cfg owner=root group=apache mode=640
    notify: restart httpd

  - name: copy iptables
    action: copy src=files/iptables dest=/etc/sysconfig/iptables
    notify: restart iptables

  - name: generate static
    django_manage: command=collectstatic virtualenv=/opt/apps/RatticWeb.venv app_path=/opt/apps/RatticWeb

  - name: sync db
    django_manage: command=syncdb virtualenv=/opt/apps/RatticWeb.venv app_path=/opt/apps/RatticWeb

  - name: migrate db
    django_manage: command=migrate virtualenv=/opt/apps/RatticWeb.venv app_path=/opt/apps/RatticWeb

  handlers:
  - name: restart mysql
    action: service name=mysqld state=restarted
  - name: reload mysql
    action: service name=mysqld state=reloaded
  - name: restart postgresql
    action: service name=postgresql state=restarted
  - name: reload postgresql
    action: service name=postgresql state=reloaded

  - name: create initial user
    django_manage: command=demosetup virtualenv=/opt/apps/RatticWeb.venv app_path=/opt/apps/RatticWeb

  - name: restart httpd
    action: service name=httpd state=restarted
  - name: restart iptables
    action: service name=iptables state=restarted
  - name: reload httpd
    action: service name=httpd state=reloaded
  - name: restart mysql
    action: service name=mysqld state=restarted
  - name: reload mysql
    action: service name=mysqld state=reloaded
  - name: restart postgresql
    action: service name=postgresql state=restarted
  - name: reload postgresql
    action: service name=postgresql state=reloaded

